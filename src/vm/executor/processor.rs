use crate::arena::Arena;
use crate::robot::Robot;
use crate::types::ArenaCommand;
use crate::vm::error::VMFault;
use crate::vm::instruction::Instruction;
use std::collections::VecDeque;

/// Trait for instruction processor implementations
/// Each processor is responsible for executing a logical group of instructions
pub trait InstructionProcessor {
    /// Returns true if this processor can handle the given instruction
    fn can_process(&self, instruction: &Instruction) -> bool;

    /// Executes the instruction, updating robot state and potentially queueing arena commands
    ///
    /// # Arguments
    /// * `robot` - The robot executing the instruction
    /// * `all_robots` - All robots in the arena (for operations that need to reference other robots)
    /// * `arena` - The arena state
    /// * `instruction` - The instruction to execute
    /// * `command_queue` - Queue for arena commands generated by the instruction
    ///
    /// # Returns
    /// * `Ok(())` if the instruction executed successfully
    /// * `Err(VMFault)` if an error occurred during execution
    fn process(
        &self,
        robot: &mut Robot,
        all_robots: &[Robot],
        arena: &Arena,
        instruction: &Instruction,
        command_queue: &mut VecDeque<ArenaCommand>,
    ) -> Result<(), VMFault>;
}
